// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSystemTMDB.Properties.Data;

#nullable disable

namespace MovieSystemTMDB.Migrations
{
    [DbContext(typeof(MovieTmdbDbContext))]
    partial class MovieTmdbDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 28,
                            Description = "Exciting and fast-paced",
                            Title = "Action"
                        },
                        new
                        {
                            GenreId = 12,
                            Description = "Thrilling quests and exploration",
                            Title = "Adventure"
                        },
                        new
                        {
                            GenreId = 16,
                            Description = "Artistic and imaginative",
                            Title = "Animation"
                        },
                        new
                        {
                            GenreId = 35,
                            Description = "Humorous and entertaining",
                            Title = "Comedy"
                        },
                        new
                        {
                            GenreId = 80,
                            Description = "Involves criminal activities and investigations",
                            Title = "Crime"
                        },
                        new
                        {
                            GenreId = 99,
                            Description = "Based on factual events or subjects",
                            Title = "Documentary"
                        },
                        new
                        {
                            GenreId = 18,
                            Description = "Emotional and intense",
                            Title = "Drama"
                        },
                        new
                        {
                            GenreId = 10751,
                            Description = "Suitable for the whole family",
                            Title = "Family"
                        },
                        new
                        {
                            GenreId = 14,
                            Description = "Magical and mythical elements",
                            Title = "Fantasy"
                        },
                        new
                        {
                            GenreId = 36,
                            Description = "Based on past events or historical periods",
                            Title = "History"
                        },
                        new
                        {
                            GenreId = 27,
                            Description = "Intended to frighten and invoke fear",
                            Title = "Horror"
                        },
                        new
                        {
                            GenreId = 10402,
                            Description = "Centered around music and performances",
                            Title = "Music"
                        },
                        new
                        {
                            GenreId = 9648,
                            Description = "Involves puzzles and enigmas to solve",
                            Title = "Mystery"
                        },
                        new
                        {
                            GenreId = 10749,
                            Description = "Focuses on romantic relationships and emotions",
                            Title = "Romance"
                        },
                        new
                        {
                            GenreId = 878,
                            Description = "Imagines futuristic or scientific concepts",
                            Title = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 10770,
                            Description = "Made for television broadcasts",
                            Title = "TV Movie"
                        },
                        new
                        {
                            GenreId = 53,
                            Description = "Intense and suspenseful",
                            Title = "Thriller"
                        },
                        new
                        {
                            GenreId = 10752,
                            Description = "Set during times of war or military conflicts",
                            Title = "War"
                        },
                        new
                        {
                            GenreId = 37,
                            Description = "Set during times of American Old West",
                            Title = "Western"
                        });
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("MovieLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PersonId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.MovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("MovieRatings");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.PersonGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonGenres");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.Movie", b =>
                {
                    b.HasOne("MovieSystemTMDB.Properties.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSystemTMDB.Properties.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.MovieRating", b =>
                {
                    b.HasOne("MovieSystemTMDB.Properties.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSystemTMDB.Properties.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieSystemTMDB.Properties.Models.PersonGenre", b =>
                {
                    b.HasOne("MovieSystemTMDB.Properties.Models.Genre", "Genres")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSystemTMDB.Properties.Models.Person", "Persons")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genres");

                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
